name: Complete CI/CD Pipeline with Kind

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: python-calculator
  CLUSTER_NAME: python-calculator

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m unittest discover .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:latest
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Setup Kind
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        config: local-testing/kind-cluster.yaml
        wait: 300s
    
    - name: Load Docker image into Kind
      run: |
        docker load --input /tmp/image.tar
        kind load docker-image ${{ env.IMAGE_NAME }}:latest --name ${{ env.CLUSTER_NAME }}
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s-local/deployment.yaml
        kubectl apply -f k8s-local/service.yaml
        
        echo "Waiting for deployment to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/python-calculator
        
        echo "✅ Deployment complete!"
        kubectl get pods -l app=python-calculator
        kubectl get services
    
    - name: Test deployed application
      run: |
        echo "Testing API endpoints with port forwarding..."
        
        # Wait for service to be fully ready
        sleep 30
        
        # Start port forwarding in background
        kubectl port-forward service/python-calculator-service 8080:80 &
        PORT_FORWARD_PID=$!
        
        # Wait for port forwarding to establish
        sleep 10
        
         # Test health endpoint and verify response
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -f -s http://localhost:8080/health)
        echo "Health response: $HEALTH_RESPONSE"
        if [[ "$HEALTH_RESPONSE" != *"healthy"* ]]; then
          echo "❌ Health check failed!"
          kill $PORT_FORWARD_PID
          exit 1
        fi
        echo "✅ Health endpoint verified"
        
        # Test add endpoint and verify calculation
        echo "Testing add endpoint (5 + 3 = 8)..."
        ADD_RESPONSE=$(curl -f -s http://localhost:8080/add/5/3)
        echo "Add response: $ADD_RESPONSE"
        if [[ "$ADD_RESPONSE" != *"8"* ]]; then
          echo "❌ Add calculation failed! Expected 8 in response"
          kill $PORT_FORWARD_PID
          exit 1
        fi
        echo "✅ Add endpoint verified"
        
        # Test subtract endpoint and verify calculation
        echo "Testing subtract endpoint (10 - 4 = 6)..."
        SUB_RESPONSE=$(curl -f -s http://localhost:8080/sub/10/4)
        echo "Sub response: $SUB_RESPONSE"
        if [[ "$SUB_RESPONSE" != *"6"* ]]; then
          echo "❌ Subtract calculation failed! Expected 6 in response"
          kill $PORT_FORWARD_PID
          exit 1
        fi
        echo "✅ Subtract endpoint verified"
        
        # Stop port forwarding
        kill $PORT_FORWARD_PID

        echo "✅ All API endpoints are verified!"
      
    - name: Show deployment summary
      run: |
        echo "✅ Deployment Summary:"
        kubectl get all -l app=python-calculator